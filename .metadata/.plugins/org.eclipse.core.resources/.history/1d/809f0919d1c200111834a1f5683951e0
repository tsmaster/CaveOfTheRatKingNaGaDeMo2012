package com.bigdicegames.nagademo2012.core.map.mapobjects.combat;

import java.util.ArrayList;

import com.bigdicegames.nagademo2012.core.map.Location;
import com.bigdicegames.nagademo2012.core.map.LongRunningJob;
import com.bigdicegames.nagademo2012.core.map.MapHopJob;
import com.bigdicegames.nagademo2012.core.map.MapMgr;
import com.bigdicegames.nagademo2012.core.map.MapObject;
import com.bigdicegames.nagademo2012.core.map.mapobjects.combat.brains.CombatBrain;
import com.bigdicegames.nagademo2012.core.modes.combat.CombatMode;
import com.bigdicegames.nagademo2012.core.modes.combat.Command;
import com.bigdicegames.nagademo2012.core.modes.combat.WaitForCommand.Action;

public class Combatant extends MapObject {
	
	public enum Affiliation {
		PLAYER,
		NPC,
		HOSTILE
	};

	private String name;
	private int baseHitPoints;
	private int currentHitPoints;
	private Command command;
	private boolean complete;
	private LongRunningJob animationJob;
	private Affiliation affiliation;
	private int toHit;
	private int armorClass;
	private int damageDieSize;
	private boolean isAlive;
	private ArrayList<CombatBrain> brains;

	public Combatant(String filename) {
		super(filename);
		affiliation = Affiliation.NPC;
		isAlive = true;
		this.brains = new ArrayList<CombatBrain>();
	}
	
	public Combatant setCharacterName(String name) {
		this.name = name;
		return this;
	}
	
	public String getCharacterName() {
		return name;
	}

	public Combatant setHitPoints(int hitPoints) {
		this.baseHitPoints = hitPoints;
		this.currentHitPoints = hitPoints;
		return this;
	}
	
	public int getBaseHitPoints() {
		return baseHitPoints;
	}
	
	public int getCurrentHitPoints() {
		return currentHitPoints;
	}
	
	public void addHitPoints(int hitPoints) {
		currentHitPoints = Math.max(0, Math.min(hitPoints+currentHitPoints, baseHitPoints));
		if (currentHitPoints <= 0) {
			isAlive = false;
			MapMgr.get().getCurrentMap().notifyDeath(this);
		}
	}
	
	public boolean isAlive() {
		return isAlive;
	}

	public void setCommand(Command command) {
		this.command = command;

		if (command == null) {
			return;
		}

		if (command.getAction() == Action.MOVE) {
			Location startLoc = MapMgr.get().getCurrentMap().getLocation(getPosition());
			Location destLoc = MapMgr.get().getCurrentMap().getLocation(command.getDestination());
			animationJob = new MapHopJob(startLoc, destLoc, this);
			return;
		}
		if (command.getAction() == Action.ATTACK) {
			Location destLoc = MapMgr.get().getCurrentMap().getLocation(command.getDestination());
			for (MapObject destObj : destLoc.getMapObjects()) {
				Combatant destCombatant = (Combatant)destObj;
				if (destCombatant != null && opposed(destCombatant)) {
					animationJob = new AttackJob(this, destCombatant);
					return;
				}
			}
		}
	}
	
	public Command getCommand() {
		return command;
	}
	
	public boolean hasActiveCommand() {
		return (command != null && (!complete));
	}
	
	public LongRunningJob getAnimationJob() {
		return animationJob;
	}

	public boolean opposed(Combatant destCombatant) {
		Affiliation destAff = destCombatant.getAffiliation();
		if (destAff == Affiliation.NPC || this.affiliation == Affiliation.NPC) {
			// NPCs don't oppose anybody
			return false;
		}
		return destAff != this.affiliation;
	}

	protected Combatant setAffiliation(Affiliation affiliation) {
		this.affiliation = affiliation;
		return this;
	}
	
	public Affiliation getAffiliation() {
		return affiliation;
	}

	public Combatant setToHit(int toHit) {
		this.toHit = toHit;
		return this;
	}
	public int getToHit() {
		return toHit;
	}

	/**
	 * 
	 * @return Armor Class (AC) from 0 (no armor) up to 10 (plate) and beyond
	 */
	public int getArmorClass() {
		return armorClass;
	}
	
	public Combatant setArmorClass(int armorClass) {
		this.armorClass = armorClass;
		return this;
	}

	public int getDamageDieSize() {
		return damageDieSize;
	}
	
	public Combatant setDamageDieSize(int damageDieSize) {
		this.damageDieSize = damageDieSize;
		return this;
	}
	
	public Combatant setBrain(CombatBrain brain) {
		this.brains.clear();
		this.brains.add(brain);
		return this;
	}
	
	public void pushBrain(CombatBrain brain) {
		this.brains.add(0, brain);
	}
	
	public void popBrain() {
		this.brains.remove(0);
	}
	
	public Command selectCombatAction(CombatMode combatMode) {
		for (CombatBrain b : brains) {
			Command c = b.selectCommand(combatMode);
			if (c != null) {
				return c;
			}
		}
		return null;
	}
	
	public boolean hasBrain() {
		return (this.brains.size() > 0);
	}
}
