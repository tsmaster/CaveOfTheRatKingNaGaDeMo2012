package com.bigdicegames.nagademo2012.core.map;

import static playn.core.PlayN.assets;
import static playn.core.PlayN.graphics;
import static playn.core.PlayN.json;
import static playn.core.PlayN.log;

import java.util.ArrayList;
import java.util.HashMap;

import playn.core.GroupLayer;
import playn.core.ImageLayer;
import playn.core.Json;
import playn.core.Json.Array;
import playn.core.Layer;
import playn.core.PlayN;
import playn.core.ResourceCallback;

import com.bigdicegames.nagademo2012.core.CameraMgr;
import com.bigdicegames.nagademo2012.core.map.mapobjects.CombatMapMarker;
import com.bigdicegames.nagademo2012.core.map.mapobjects.Guy;
import com.bigdicegames.nagademo2012.core.map.mapobjects.PortalMapObject;
import com.bigdicegames.nagademo2012.core.map.mapobjects.combat.Combatant;
import com.bigdicegames.nagademo2012.core.math.Vec2f;
import com.bigdicegames.nagademo2012.core.math.Vec2i;
import com.bigdicegames.nagademo2012.core.util.BoundingBox4f;
import com.bigdicegames.nagademo2012.core.util.BoundingBox4i;


public class GameMap {
	Tile[][] tiles;
	private GroupLayer tileLayer, mapObjectsLayer, mapLayer;
	private int tileWidth;
	private int tileHeight;
	private BoundingBox4f window;
	private ArrayList<MapObject> movingMapObjects;
	Location[][] locations;
	private Vec2i playerPos;
	private Guy partyMarker;
	public boolean parsed;
	private Vec2i spawnPos;
	private Vec2i respawnPos;
	
	private ArrayList<Vec2i> playerSpawnPoints;
	private ArrayList<Vec2i> enemySpawnPoints;
	
	public GameMap(final String filename) {
		tileLayer = graphics().createGroupLayer();
		mapObjectsLayer = graphics().createGroupLayer();
		mapLayer = graphics().createGroupLayer();
		mapLayer.add(tileLayer);
		mapLayer.add(mapObjectsLayer);
		movingMapObjects = new ArrayList<MapObject>();
		playerSpawnPoints = new ArrayList<Vec2i>();
		enemySpawnPoints = new ArrayList<Vec2i>();
		
		assets().getText(filename, new ResourceCallback<String>() {
			@Override
			public void done(String resource) {
				log().info("loaded "+filename);
				parseMap(resource);
				log().info("parsed "+filename);
				parsed=true;
			}

			@Override
			public void error(Throwable err) {
				// TODO Auto-generated method stub
				log().error("failed to load map "+filename);
				log().error(err.toString());
				for (StackTraceElement e : err.getStackTrace()) {
					log().error(e.toString());
				}
			}});
		makePartyMarker();
	}
	
	public Vec2i getRespawnPos() {
		return respawnPos;
	}
	
	protected void setRespawnPos(Vec2i pos) {
		respawnPos = pos;
	}
	
	public Vec2i getSpawnPos() {
		return spawnPos;
	}
	
	protected void setSpawnPos(Vec2i pos) {
		spawnPos = pos;
	}
	
	
	protected void makePartyMarker() {
		partyMarker = new Guy();
	}

	public MapObject getFocusedMarker() {
		return partyMarker;
	}
	
	public Layer getLayer() {
		return mapLayer;
	}
	
	public void setWindow(float left, float top, float right, float bottom) {
		window = new BoundingBox4f(left, top, right, bottom);
	}
	
	public void setCameraPosition(float cx, float cy) {
		float ulx, uly;
		if (window != null) {
			ulx = cx - (window.right + window.left) * 0.5f;
			uly = cy - (window.bottom + window.top) * 0.5f; 
		} else {
			ulx = cx;
			uly = cy;
		}
		
		mapLayer.setTranslation(-ulx, -uly);
		
		BoundingBox4f viewport = window.translate(ulx, uly);
		
		tileLayer.clear();
		
		for (int tx=0;tx<tileWidth;++tx) {
			for (int ty = 0; ty< tileHeight; ++ty) {
				Tile t = tiles[tx][ty];
				if (t != null) {
					BoundingBox4f tileBB = t.getWorldBoundingBox();
					if (viewport.intersects(tileBB)) {
						tileLayer.add(t.getLayer());
					}
				}
			}
		}
	}
	
	public Vec2f screenToWorld(float sx, float sy) {
		pythagoras.f.Point p = new pythagoras.f.Point();
		mapLayer.transform().inverseTransform(new pythagoras.f.Point(sx, sy), p);
		return new Vec2f(p.x, p.y);
	}
	
	
	/** Adapted from http://jemgine.omnisu.com/?page_id=412
	 * 
	 * @param worldPos
	 * @return
	 */
	public static Vec2i worldToTile(Vec2f worldPos) {
        float run = Tile.TILE_WIDTH / 4.0f;
        float rise = Tile.TILE_HEIGHT / 2.0f;
        float slope = rise / run;
        
        //log().info("wx: "+worldPos.x);
        
        int tx = (int)Math.floor(worldPos.x / (Tile.TILE_WIDTH * .75f));
        int ty = (int)Math.floor(worldPos.y / (Tile.TILE_HEIGHT));
        
        //log().info("initial tx: "+tx);
        //log().info("initial ty: "+ty);
        
        float ox = worldPos.x - tx*(Tile.TILE_WIDTH * 0.75f);
        float oy = worldPos.y - ty*Tile.TILE_HEIGHT;

        if (tx % 2 == 0) //Is this an even column?
        {
            //Section type A
        	//  |/  |
        	//  |\  |
            if (oy < rise - slope * ox) { //Point is above left line; inside northwest neighbor.
                tx -= 1;
                ty -= 1;
            }
            else if (oy > rise + slope * ox) { //Point is below right line; inside southwest neighbor.
                tx -= 1;
            }
        }
        else
        {
            //Section type B
        	// |\__|
        	// |/  |
            if (oy >= Tile.TILE_HEIGHT * 0.5f) //Is the point on the bottom half?
            {
                if (oy < (Tile.TILE_HEIGHT - slope * ox)) //Point is above sloped line; inside west neighbor.
                    tx -= 1;
            }
            else //Point is on the top half
            {
                if (oy > slope * ox) //Point is below the sloped line; inside west neighbor.
                    tx -= 1;
                else //Point is above the bottom line; inside north neighbor.
                    ty -= 1;
            }
        }

        return new Vec2i(tx,ty);
    }	
	
	/** returns the center of the tile
	 * 
	 */
	public static Vec2f tileToWorld(Vec2i tilePos) {
		float worldX = Tile.TILE_WIDTH * .75f * tilePos.x;
		float worldY = Tile.TILE_HEIGHT * tilePos.y;
		if (tilePos.x % 2 != 0) {
			worldY += Tile.TILE_HEIGHT * 0.5f;
		}
		worldX += Tile.TILE_WIDTH * 0.5f;
		worldY += Tile.TILE_HEIGHT * 0.5f;
		return new Vec2f(worldX, worldY);
	}
	
	private void parseMap(String mapString) {
	    Json.Object jso = json().parse(mapString);
        log().info("map parsed into JSON");
	    Json.Array lines = jso.getArray("lines");
	    tileWidth = lines.getString(0).length();
	    tileHeight = lines.length();
	    
        log().info("tile width: " + tileWidth);
        log().info("tile height: " + tileHeight);
        
        //int tileCount = tileWidth * tileHeight + 1;
        //sendProgress();
	    
	    // Allocate the tile grid.
	    tiles = new Tile[tileWidth][tileHeight];
	    
	    // Allocate the location grid
	    locations = new Location[tileWidth][tileHeight];
	    log().info("made locations");
	    
	    // Build object dictionary
	    HashMap<String, Json.Object> objMap = new HashMap<String, Json.Object>();
	    Array objArray = jso.getArray("objects");
	    if (objArray != null) {
		    for (int i = 0; i< objArray.length(); ++i) {
		    	Json.Object obj = objArray.getObject(i);
		    	String mapMarker = obj.getString("map_marker");
		    	objMap.put(mapMarker, obj);
		    }
	    }

	    // Loop over every tile position,
	    for (int y = 0; y < tileHeight; ++y) {
	      for (int x = 0; x < tileWidth; ++x) {
	    	  char c = getChar(lines, x, y);
	    	  String s = Character.toString(c);
	    	  if (objMap.containsKey(s)) {
	    		  createObject(objMap.get(s), x, y); 
	    	  } else {
	    		  Tile.TileType tileType = lookupChar(c);
	    		  Tile t = new Tile(tileType, x, y);
	    		  tiles[x][y] = t;
	    		  Location loc = new Location(t, x, y, this);
	    		  locations[x][y] = loc;
	    		  /*
	    		  ArrayList<MapObject> objects = generateObjects(tileType, x, y);
	    		  if (objects != null) {
	    			  for (MapObject obj: objects) {
	    				  placeMapObject(obj, x, y);
	    			  }
	    		  }*/
	    	  }
	      }
	      log().info("ending line "+y);
	    }
	    
    	Json.Object resObj = jso.getObject("respawn_pos");
	    if (resObj != null) {
	    	int x = resObj.getInt("x");
	    	int y = resObj.getInt("y");
	    	setRespawnPos(new Vec2i(x,y));
	    } else {
	    	setRespawnPos(null);
	    }
	    
    	Json.Object spawnObj = jso.getObject("spawn_pos");
	    if (spawnObj != null) {
	    	log().info("spawn pos");
	    	int x = spawnObj.getInt("x");
	    	int y = spawnObj.getInt("y");
	    	log().info("spawn pos: "+x+" "+y);
	    	setSpawnPos(new Vec2i(x,y));
	    } else {
	    	setSpawnPos(null);
	    }
	    
    	log().info("loaded from description");
    	//sendProgress();
	}
	    
	private void createObject(Json.Object obj, int x, int y) {
		String iconTag = obj.getString("icon");
		Tile.TileType tileType = null;
		for (Tile.TileType tt : Tile.TileType.values()) {
			if (tt.toString().equalsIgnoreCase(iconTag)) {
				tileType = tt;
				break;
			}
		}
		if (tileType == null) {
			log().error("what tile type is this? "+iconTag);
			tileType = Tile.TileType.WATER;
		}
		
		Tile t = new Tile(tileType, x, y);
		tiles[x][y] = t;
		Location loc = new Location(t, x, y, this);
		locations[x][y] = loc;
		
		String objectType = obj.getString("type");
		if (objectType.equalsIgnoreCase("portal")) {
			String mapName = obj.getString("name");
			int destX = obj.getInt("dest_x");
			int destY = obj.getInt("dest_y");
			PortalMapObject portal = new PortalMapObject(mapName, destX, destY);
			placeMapObject(portal, x, y);
		} else if (objectType.equalsIgnoreCase("combat")) {
			String enemyName = obj.getString("name");
			String combatMap = obj.getString("map_name");
			CombatMapMarker ratKing = new CombatMapMarker(enemyName, combatMap);
			placeMapObject(ratKing, x, y);
		} else if (objectType.equalsIgnoreCase("player spawn")) {
			playerSpawnPoints.add(new Vec2i(x, y));
		} else if (objectType.equalsIgnoreCase("enemy spawn")) {
			enemySpawnPoints.add(new Vec2i(x, y));
		}
	}
	
	private char getChar(Json.Array lines, int x, int y) {
		String line = lines.getString(y);
		if (line == null) {
			log().error("error trying to find line "+y);
			return '\0';
		}
		if (x>= line.length()) {
			log().error("error trying to find char at "+x+", "+y);
			return '\0';
		}
		
		return line.charAt(x);
	}
	
	private Tile.TileType lookupChar(char c) {
		switch (c) {
		case 'S': return Tile.TileType.SAND;
		case 'G': return Tile.TileType.GRASS;
		case 'R': return Tile.TileType.ROAD;
		case 'C': return Tile.TileType.CITY;
		case 'M': return Tile.TileType.MOUNTAIN;
		case 'I': return Tile.TileType.SNOW;
		
		default: return Tile.TileType.WATER;
		}
	}
	
	public float getRandomX() {
		BoundingBox4f box = getBoundingBox();
		return PlayN.random() * (box.right - box.left) + box.left; 
	}
	
	public float getRandomY() {
		BoundingBox4f box = getBoundingBox();
		return PlayN.random() * (box.bottom - box.top) + box.top;
	}
	
	public Vec2i getRandomTilePos() {
		int x = (int) (PlayN.random() * tileWidth);
		int y = (int) (PlayN.random() * tileHeight);
		return new Vec2i(x,y);
	}
	
	public void placeMapObject(MapObject object, int x, int y) {
		locations[x][y].addMapObject(object);
		object.setPosition(x, y);
		ImageLayer objectLayer = object.getLayer();
		if (objectLayer != null) {
			mapObjectsLayer.add(objectLayer);
		}
	}
	
	public void placeMapObject(MapObject object, Vec2i pos) {
		placeMapObject(object, pos.x, pos.y);
	}
	
	public void addMovingMapObject(MapObject object) {
		movingMapObjects.add(object);
		ImageLayer objectLayer = object.getLayer();
		if (objectLayer != null) {
			mapObjectsLayer.add(objectLayer);
		}
	}

	/**
	 * removes the object from mapObjects and from placedMapObjects.
	 */
	public void removeMapObject(MapObject object) {
		if (movingMapObjects.contains(object)) {
			movingMapObjects.remove(object);
		}
		if (locations == null) {
			log().error("no locations in removeMapObject?");
			return;
		}
		for (Location[] locationRow : locations) {
			for (Location loc : locationRow) {
				if (loc.containsMapObject(object)) {
					loc.removeMapObject(object);
				}
			}
		}
		
		Layer objLayer = object.getLayer();
		if (objLayer.parent() == mapObjectsLayer) {
			mapObjectsLayer.remove(objLayer);
		}
	}

	public BoundingBox4f getBoundingBox() {		
		if (tiles == null) {
			return null;
		}
		
		Tile ulTile = tiles[0][0];
		if (ulTile == null) {
			return null;
		}
		
		Tile brTile = tiles[tileWidth-1][tileHeight-1];
		if (brTile == null) {
			return null;
		}
		BoundingBox4f ul = ulTile.getWorldBoundingBox();
		BoundingBox4f br = brTile.getWorldBoundingBox();
		
		return new BoundingBox4f(ul.left, ul.top, br.right, br.bottom);
	}

	public Location getLocation(int x, int y) {
		if (x < 0 || x >= tileWidth || y < 0 || y>= tileHeight) {
			log().error("trying to get location for "+x+" "+y);
			return null;
		}
		return locations[x][y];
	}
	
	public Location getLocation(Vec2i pos) {
		return getLocation(pos.x, pos.y);
	}
	
	public ArrayList<Location> getLocationNeighbors(int tileX, int tileY) {
		ArrayList<Location> neighbors = new ArrayList<Location>(6);
		ArrayList<Vec2i> deltas = new ArrayList<Vec2i>(6);
		if (tileX % 2 == 0) {
			deltas.add(new Vec2i(0, -1));
			deltas.add(new Vec2i(0, 1));
			deltas.add(new Vec2i(-1, -1));
			deltas.add(new Vec2i(-1, 0));
			deltas.add(new Vec2i(1, -1));
			deltas.add(new Vec2i(1, 0));
		} else {
			deltas.add(new Vec2i(0, -1));
			deltas.add(new Vec2i(0, 1));
			deltas.add(new Vec2i(-1, 1));
			deltas.add(new Vec2i(-1, 0));
			deltas.add(new Vec2i(1, 1));
			deltas.add(new Vec2i(1, 0));
		}
		
		for (Vec2i delta : deltas) {
			int offsetX = tileX + delta.x;
			int offsetY = tileY + delta.y;
			
			if (offsetX >= 0 && offsetX < tileWidth &&
					offsetY >= 0 && offsetY < tileHeight) {
				neighbors.add(locations[offsetX][offsetY]);
			}
		}
		return neighbors;
	}

	public int getTileWidth() {
		return tileWidth;
	}
	
	public int getTileHeight() {
		return tileHeight;
	}

	public void teleportTo(Vec2i tilePos) {
		log().info("teleported to "+tilePos);
		CameraMgr.get().setPos(tileToWorld(tilePos));
		setCameraPosition(tileToWorld(tilePos));
		playerPos = tilePos;
		MapObject m = getFocusedMarker();
		if (m != null) {
			m.setPosition(tilePos);
			removeMapObject(m);
			placeMapObject(m, tilePos);
		}
	}

	public void setCameraPosition(Vec2f worldPos) {
		setCameraPosition(worldPos.x, worldPos.y);
	}

	public void setWindow(BoundingBox4i b) {
		setWindow(b.left, b.top, b.right, b.bottom);
	}

	public Vec2i getPlayerPos() {
		return playerPos;
	}

	public void setPlayerPos(Vec2i tilePos) {
		playerPos = tilePos;
	}

	public void notifyDeath(Combatant combatant) {
		removeMapObject(combatant);
	}

	public void centerOnCurrentPos() {
		MapObject m = getFocusedMarker(); 
		if (m != null) {
			Vec2i tilePos = m.getPosition();
			CameraMgr.get().setPos(tileToWorld(tilePos));
			setCameraPosition(tileToWorld(tilePos));
		}
	}
	
	public float getFracLoaded() {
		int tileCount = tileHeight * tileWidth;
		int tilesLoaded = 0;
		
	    // Loop over every tile position,
	    for (int y = 0; y < tileHeight; ++y) {
	      for (int x = 0; x < tileWidth; ++x) {
	    	  if (tiles[x][y].isLoaded()) {
	    		  tilesLoaded += 1;
	    	  }
	      }
	    }
	    return (float)(tilesLoaded) / tileCount;
	}
	
	public void unload() {
	    // Loop over every tile position,
	    for (int y = 0; y < tileHeight; ++y) {
	      for (int x = 0; x < tileWidth; ++x) {
	    	  tiles[x][y].unload();
	      }
	    }
	}
	
	public void load() {
	    // Loop over every tile position,
	    for (int y = 0; y < tileHeight; ++y) {
	      for (int x = 0; x < tileWidth; ++x) {
	    	  tiles[x][y].load();
	      }
	    }
	}

	public ArrayList<Vec2i> getPlayerSpawnPoints() {
		return playerSpawnPoints;
	}
	
	public ArrayList<Vec2i> getEnemySpawnPoints() {
		return enemySpawnPoints;
	}

	public void clearMapObjects() {
	    for (int y = 0; y < tileHeight; ++y) {
	    	for (int x = 0; x < tileWidth; ++x) {
	    		ArrayList<MapObject> objects = locations[x][y].getMapObjects();
	    		for (MapObject o : objects) {
	    			removeMapObject(o);
	    		}
	    	}
	    }
	}
}
