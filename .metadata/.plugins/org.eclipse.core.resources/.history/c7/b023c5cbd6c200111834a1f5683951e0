package com.bigdicegames.nagademo2012.core.modes;

import static playn.core.PlayN.log;
import static playn.core.PlayN.random;

import java.util.ArrayList;

import playn.core.Keyboard.Event;
import playn.core.Mouse.ButtonEvent;
import playn.core.Pointer;

import com.bigdicegames.nagademo2012.core.CameraMgr;
import com.bigdicegames.nagademo2012.core.map.GameMap;
import com.bigdicegames.nagademo2012.core.map.Location;
import com.bigdicegames.nagademo2012.core.map.MapObject;
import com.bigdicegames.nagademo2012.core.map.Tile;
import com.bigdicegames.nagademo2012.core.math.Vec2f;
import com.bigdicegames.nagademo2012.core.math.Vec2i;
import com.bigdicegames.nagademo2012.core.util.BoundingBox4f;

public class HoppingGuyMode implements GameMode {
	private static final float CAMERA_INTERP_DURATION = 0.7f;
	
	private static final float SPEED = 250.0f;
	private static final float HERMITE_SPEED = 1.2f;
	private static final float HERMITE_Y_START = -200.0f;
	private static final float HERMITE_Y_END = 200.0f;
	private GameMap gameMap;
	private MapObject movingGuy;
	private Location startLoc;
	private Location destLoc;
	private float guyX;
	private float guyY;
	private float prevGuyX;
	private float prevGuyY;
	private float guyT;
	private Vec2i centerTile;

	public HoppingGuyMode(GameMap gameMap) {
		this.gameMap = gameMap;
	}

	@Override
	public void onPopped() {
		// TODO Auto-generated method stub

	}

	@Override
	public void onPushed() {
		centerTile = null;
	}
	
	@Override
	public void onBecomeTop() {
		
	}

	@Override
	public void onUpdate(float deltaSeconds) {
		BoundingBox4f box = gameMap.getBoundingBox();
		CameraMgr camMgr = CameraMgr.get();
		
		if (box == null) {
			return;
		} else if (centerTile == null) {
			centerTile = new Vec2i(gameMap.getTileWidth() / 2, gameMap.getTileHeight() / 2);
			Vec2f centerWorldPos = GameMap.tileToWorld(centerTile);
			camMgr.interpolateTo(centerWorldPos, CAMERA_INTERP_DURATION, CameraMgr.InterpolationStyle.EASE_OUT_QUAD);
		}
		//this.gameMap.setCameraPosition((box.left + box.right) * 0.5f, (box.top + box.bottom) * 0.5f);
		//Vec2f tileCenter = GameMap.tileToWorld(centerTile);
		//this.gameMap.setCameraPosition(tileCenter.x, tileCenter.y);
		camMgr.update(deltaSeconds);
		Vec2f camPos = camMgr.getPos();
		this.gameMap.setCameraPosition(camPos.x, camPos.y);
		
		if (movingGuy == null) {
			startLoc = pickLoc();
			//log().info("picked loc: "+startLoc.getTileLocationString());
			movingGuy = pickGuyToMove(startLoc);
			if (movingGuy == null) {
				return;
			}
			//log().info("picked guy: "+movingGuy);
			destLoc = pickNeighborLoc(startLoc);
			
			if (destLoc == null) {
				movingGuy = null;
			} else {
				//log().info("picked dest: "+destLoc.getTileLocationString());
				gameMap.removeMapObject(movingGuy);
				gameMap.addMovingMapObject(movingGuy);
				Vec2f pos = startLoc.getWorldPos();
				guyX = pos.x;
				guyY = pos.y;
				guyT = 0.0f;
				prevGuyX = guyX;
				prevGuyY = guyY;
				
				Vec2f destPos = destLoc.getWorldPos();
				camMgr.interpolateTo(destPos, CAMERA_INTERP_DURATION, CameraMgr.InterpolationStyle.EASE_OUT_QUAD);
			}
		} else {
			hermiteUpdate(deltaSeconds);
			//straightLineUpdate(deltaSeconds);
		}
	}
	
	private void hermiteUpdate(float deltaSeconds) {
		guyT += deltaSeconds * HERMITE_SPEED;
		prevGuyX = guyX;
		prevGuyY = guyY;
		
		if (guyT > 1.0f) {
			guyT = 1.0f;
		}
		
		Vec2f startPos = startLoc.getWorldPos();
		Vec2f destPos = destLoc.getWorldPos();
		guyX = evalHermite(startPos.x, destPos.x, 0.0f, 0.0f, guyT);
		guyY = evalHermite(startPos.y, destPos.y, HERMITE_Y_START, HERMITE_Y_END, guyT);
	  
		if (guyT >= 1.0f) {
		  gameMap.removeMapObject(movingGuy);
		  gameMap.placeMapObject(movingGuy, destLoc.getTileX(), destLoc.getTileY());
		  movingGuy = null;
		}
	}
	
	private void straightLineUpdate(float deltaSeconds) {
	  prevGuyX = guyX;
	  prevGuyY = guyY;
	  
	  Vec2f destPos = destLoc.getWorldPos();
	  float destX = destPos.x;
	  float destY = destPos.y;
	  float diffX = destX - guyX;
	  float diffY = destY - guyY;
	  // TODO get rid of sqrt
	  float diffH = (float) Math.sqrt(diffX * diffX + diffY * diffY);

	  if (diffH > deltaSeconds * SPEED) {
		  guyX += diffX/diffH * deltaSeconds * SPEED;
		  guyY += diffY/diffH * deltaSeconds * SPEED;
		  
		  //gameMap.setCameraPosition(camX, camY);
		  
	  } else {
		  gameMap.removeMapObject(movingGuy);
		  gameMap.placeMapObject(movingGuy, destLoc.getTileX(), destLoc.getTileY());
		  movingGuy = null;
	  }
	}
	


	private Location pickNeighborLoc(Location loc) {
		ArrayList<Location> neighbors = loc.getNeighbors();
		
		ArrayList<Location> goodNeighbors = new ArrayList<Location>(6);
		for (Location nloc : neighbors) {
			if (nloc.getTile().getType() == Tile.TileType.WATER || nloc.getMapObjects().size() > 0) {
				continue;
			}
			goodNeighbors.add(nloc);
		}
		if (goodNeighbors.size() == 0) {
			return null;
		}
		int i = (int) (random() * goodNeighbors.size());
		return goodNeighbors.get(i);
	}

	private MapObject pickGuyToMove(Location loc) {
		ArrayList<MapObject> objs = loc.getMapObjects();
		if (objs == null) {
			log().error("null object list");
			return null;
		}
		if (objs.size() == 0) {
			return null;
		}
		int i = (int) (random() * objs.size());
		return objs.get(i);
	}

	private Location pickLoc() {
		Vec2i tilePos = gameMap.getRandomTilePos();
		return gameMap.getLocation(tilePos.x, tilePos.y);
	}

	@Override
	public void onPaint(float alpha) {
		if (movingGuy != null) {
			float x = (guyX * alpha) + prevGuyX * (1 - alpha);
			float y = (guyY * alpha) + prevGuyY * (1 - alpha);
			
			movingGuy.centerOnWorldPosition(x,y);
		}
	}
	
	private float evalHermite(float p0, float p1, float m0, float m1, float t) {
		   float t2 = t*t;
		   float t3 = t2*t;
		   return (2*t3 - 3*t2 + 1)*p0 + (t3-2*t2+t)*m0 + (-2*t3+3*t2)*p1 + (t3-t2)*m1;
	}

	@Override
	public void onMouseDown(ButtonEvent event) {
		float sx = event.localX();
		float sy = event.localY();
		
		Vec2f worldPos = gameMap.screenToWorld(sx, sy);
		Vec2i tilePos = GameMap.worldToTile(worldPos);
		centerTile = tilePos;
	}

	@Override
	public void onPointerStart(Pointer.Event event) {
		float sx = event.localX();
		float sy = event.localY();
		
		Vec2f worldPos = gameMap.screenToWorld(sx, sy);
		Vec2i tilePos = GameMap.worldToTile(worldPos);
		centerTile = tilePos;
	}

	@Override
	public void onKeyDown(Event event) {
		// TODO Auto-generated method stub
		
	}
}
